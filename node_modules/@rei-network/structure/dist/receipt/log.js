"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Log = void 0;
const ethereumjs_util_1 = require("ethereumjs-util");
const extension_1 = require("./extension");
/**
 * Transaction log class
 */
class Log {
    constructor(address, topics, data) {
        this.removed = false;
        this.address = address;
        this.topics = topics;
        this.data = data;
    }
    /**
     * Generate Log object by given serialized data
     * @param serialized - Serialized data
     * @returns Log object
     */
    static fromRlpSerializedLog(serialized) {
        const values = ethereumjs_util_1.rlp.decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized log input. Must be array');
        }
        return Log.fromValuesArray(values);
    }
    /**
     * Generate Log object by given values
     * @param values - Values
     * @returns Log object
     */
    static fromValuesArray(values) {
        if (values.length !== 3) {
            throw new Error('Invalid log. Only expecting 3 values.');
        }
        const [address, topics, data] = values;
        return new Log(address, topics, data);
    }
    /**
     * Get the row data in the log information
     * @returns The object of address topics and data
     */
    raw() {
        return [this.address, this.topics, this.data];
    }
    /**
     * Serialize transaction log information
     * @returns Encoded data
     */
    serialize() {
        return ethereumjs_util_1.rlp.encode(this.raw());
    }
    /**
     * Init extension
     */
    initExtension(receipt, logIndex) {
        this.extension = new extension_1.LogExtension(receipt, logIndex);
    }
    /**
     * Convert log information to json format
     * @returns JSON format log
     */
    toRPCJSON() {
        var _a, _b, _c, _d, _e;
        return {
            address: (0, ethereumjs_util_1.bufferToHex)(this.address),
            blockHash: ((_a = this.extension) === null || _a === void 0 ? void 0 : _a.blockHash) ? (0, ethereumjs_util_1.bufferToHex)(this.extension.blockHash) : undefined,
            blockNumber: ((_b = this.extension) === null || _b === void 0 ? void 0 : _b.blockNumber) ? (0, ethereumjs_util_1.bnToHex)(this.extension.blockNumber) : undefined,
            data: (0, ethereumjs_util_1.bufferToHex)(this.data),
            logIndex: ((_c = this.extension) === null || _c === void 0 ? void 0 : _c.logIndex) !== undefined ? (0, ethereumjs_util_1.intToHex)(this.extension.logIndex) : undefined,
            removed: this.removed,
            topics: this.topics.map((topic) => (0, ethereumjs_util_1.bufferToHex)(topic)),
            transactionHash: ((_d = this.extension) === null || _d === void 0 ? void 0 : _d.transactionHash) ? (0, ethereumjs_util_1.bufferToHex)(this.extension.transactionHash) : undefined,
            transactionIndex: ((_e = this.extension) === null || _e === void 0 ? void 0 : _e.transactionIndex) !== undefined ? (0, ethereumjs_util_1.intToHex)(this.extension.transactionIndex) : undefined
        };
    }
}
exports.Log = Log;
//# sourceMappingURL=log.js.map