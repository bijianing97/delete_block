/// <reference types="node" />
/// <reference types="bn.js" />
import { BN } from 'ethereumjs-util';
import { Block } from '../block';
import { Transaction } from '../tx';
import { LogRawValues, Log } from './log';
import { ReceiptExtension } from './extension';
export declare type ReceiptRawValue = (Buffer | LogRawValues[])[];
/**
 * Transaction receipt class
 */
export declare class Receipt {
    cumulativeGasUsed: Buffer;
    bitvector: Buffer;
    logs: Log[];
    status: 0 | 1;
    extension?: ReceiptExtension;
    /**
     * Return the cumulative gas in `BN` type
     */
    get bnCumulativeGasUsed(): BN;
    constructor(cumulativeGasUsed: Buffer, bitvector: Buffer, logs: Log[], status: 0 | 1);
    /**
     * Generate receipt object by given serialized data
     * @param serialized - Serialized data
     * @returns Receipt object
     */
    static fromRlpSerializedReceipt(serialized: Buffer): Receipt;
    /**
     * Generate receipt object by given values
     * @param values - Values
     * @returns Receipt object
     */
    static fromValuesArray(values: ReceiptRawValue): Receipt;
    /**
     * Get the row data from receipt
     * @returns
     */
    raw(): ReceiptRawValue;
    /**
     * Serialize data
     * @returns Encoded data
     */
    serialize(): Buffer;
    /**
     * Init extension
     */
    initExtension(block: Block, tx: Transaction, gasUsed: BN, txIndex: number): void;
    /**
     * Convert receipt information to json format
     * @returns JSON format receipt
     */
    toRPCJSON(): {
        blockHash: string | undefined;
        blockNumber: string | undefined;
        contractAddress: string | null;
        cumulativeGasUsed: string;
        from: string | undefined;
        gasUsed: string | undefined;
        logs: {
            address: string;
            blockHash: string | undefined;
            blockNumber: string | undefined;
            data: string; /**
             * Init extension
             */
            logIndex: string | undefined;
            removed: boolean;
            topics: string[];
            transactionHash: string | undefined;
            transactionIndex: string | undefined;
        }[];
        logsBloom: string;
        status: string;
        to: string | undefined;
        transactionHash: string | undefined;
        transactionIndex: string | undefined;
    };
}
