/// <reference types="node" />
import { LogExtension, ReceiptExtension } from './extension';
export declare type LogRawValue = Buffer | Buffer[];
export declare type LogRawValues = LogRawValue[];
/**
 * Transaction log class
 */
export declare class Log {
    address: Buffer;
    topics: Buffer[];
    data: Buffer;
    removed: boolean;
    extension?: LogExtension;
    constructor(address: Buffer, topics: Buffer[], data: Buffer);
    /**
     * Generate Log object by given serialized data
     * @param serialized - Serialized data
     * @returns Log object
     */
    static fromRlpSerializedLog(serialized: Buffer): Log;
    /**
     * Generate Log object by given values
     * @param values - Values
     * @returns Log object
     */
    static fromValuesArray(values: LogRawValues): Log;
    /**
     * Get the row data in the log information
     * @returns The object of address topics and data
     */
    raw(): LogRawValues;
    /**
     * Serialize transaction log information
     * @returns Encoded data
     */
    serialize(): Buffer;
    /**
     * Init extension
     */
    initExtension(receipt: ReceiptExtension, logIndex: number): void;
    /**
     * Convert log information to json format
     * @returns JSON format log
     */
    toRPCJSON(): {
        address: string;
        blockHash: string | undefined;
        blockNumber: string | undefined;
        data: string;
        logIndex: string | undefined;
        removed: boolean;
        topics: string[];
        transactionHash: string | undefined;
        transactionIndex: string | undefined;
    };
}
