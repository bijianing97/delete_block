export = LevelDOWN;
declare function LevelDOWN(location: any): LevelDOWN;
declare class LevelDOWN {
    constructor(location: any);
    location: string | undefined;
    context: any;
    exposed: any;
    _open(options: any, callback: any): void;
    _close(callback: any): void;
    _serializeKey(key: any): string | Buffer;
    _serializeValue(value: any): string | Buffer;
    _put(key: any, value: any, options: any, callback: any): void;
    _get(key: any, options: any, callback: any): void;
    _getMany(keys: any, options: any, callback: any): void;
    _del(key: any, options: any, callback: any): void;
    _clear(options: any, callback: any): void;
    _chainedBatch(): ChainedBatch;
    _batch(operations: any, options: any, callback: any): void;
    approximateSize(start: any, end: any, callback: any): void;
    compactRange(start: any, end: any, callback: any): void;
    getProperty(property: any): any;
    _iterator(options: any): Iterator;
}
declare namespace LevelDOWN {
    function destroy(location: any, callback: any, ...args: any[]): void;
    function repair(location: any, callback: any, ...args: any[]): void;
}
import ChainedBatch = require("./chained-batch");
import Iterator = require("./iterator");
